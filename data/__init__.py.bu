"""
Copyright 2015-2017 Troy Hirni
This file is distributed under the terms of the GNU 
Affero General Public License.

DATA - Data Utility

The data package supports the extraction and manipulation of data 
from a variety of databases and formatted text files, generation of
random values, and text-scanning based on unicode-related meta-data 
as well as characters.
"""

from .. import *

class Data(Base):
		
	@classmethod
	def mreader(cls, **k):
		"""
		EXPERIMENTAL.
		
		This method is intended for use by data package objects that can
		accept a file path in leiu of actual data. The keyword arg `file`
		is required. A mime.Mime object is used to select the file object
		needed, then an appropriate reader is returned.
		
		A `member` kwarg is required for files that contain other files 
		(eg., tar or zip files). If you specify such a file without 
		specifying a member, results will probably be haphazard. I'm not
		even going to test it; just be sure to specify a member for tar 
		or zip. DO NOT specify a `member` for normal files such as text, 
		csv, etc... it will either be ignored or will cause an error.
		
		Returns a reader based on keyword arguments. The full range of
		kwargs are available for file-opening, but the defaults probably
		will work best. File-opening methods select only the kwargs they
		can use, ignoring others.
		"""
		
		# get fs file object
		path = k['file']
		mime = Base.ncreate('fs.mime.Mime', path, strict)
		fobj = mime.file(**k)
		
		try:
			#
			# GAR!
			#  - still doesn't work
			#  - need to create a treader type for every file class; return
			#    the type of stream suggested for this reader
			#    ... no, that's not right either. THINK OF SOMETHING!
			#
			member=k['member']
			try:
				nmime = Base.ncreate('fs.mime.Mime', member)
				fp = fobj.open(member=member, k.get('mode', 'r'))
				
				# At this point, `fp` is a file-like stream from the tar or
				# zip file `fobj` - THE PROBLEM is that there's no way to 
				# get the Reader class of a (for example) csv.CSV file with
				# this particular `fp` as its stream.
				
				return fobj.reader(**k)
			except:
				fp.close()
				raise
				
		except:
			return fobj.reader()
	
	
	"""	
	@classmethod
	def mreader(cls, **k):
		filepath = Base.kpop(k, 'file')
		member = Base.kpop(k, 'member')
		mm = Base.ncreate('fs.mime.Mime', filepath)
		try:
			if member:
				print (k)
				return mm.reader(member=member, **k)
			else:
				return mm.reader()
		except Exception as ex:
			raise type(ex)('mime-read-fail', xdata(
					member=member, filepath=filepath, kwargs=k, 
					mime=mm.guess if mm else None
				))
	"""
